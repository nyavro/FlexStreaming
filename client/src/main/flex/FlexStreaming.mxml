<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:util="com.wp.ui.*">
    <fx:Script><![CDATA[
        import avmplus.finish;

        import com.wp.RemotingConnection;
        import com.wp.services.CommunicationService;
        import com.wp.services.ThumbnailsExtractorService;
        import com.wp.ui.EmbedCodeWindow;
        import com.wp.utils.EmbedCodeGenerator;

        import mx.controls.Alert;
        import mx.controls.Image;
        import mx.core.FlexGlobals;
        import mx.graphics.codec.JPEGEncoder;
        import mx.managers.PopUpManager;

        import org.osmf.events.MediaPlayerStateChangeEvent;

        import org.osmf.events.TimeEvent;

        private var camera:Camera;
        private var mic:Microphone;
        private var cam:Camera;
        private var nc:NetConnection;
        private var ns:NetStream;
        private var video:Video;
        private var liveUrl:String;
        [Bindable]
        private var videoMaxDuration:int;

        [Bindable]
        private var question:String;

        private var cameraAccessGranted:Boolean = false;
        private var thumbnailsExtractorService:ThumbnailsExtractorService;
        private var communicationService:CommunicationService;
        private var videoId:String;
        private var embedWidth:int;
        private var embedHeight:int;
        private var embedUrlTemplate:String;
        private var servletUrl:String;

        private const controlWidth:int = 640;
        private const controlHeight:int = 480;
        private const padding:int = 15;

        private function ensureCameraPermissions():void {
            cam.addEventListener(StatusEvent.STATUS, cameraAccessAllowed);
            var vid:Video = new Video();
            vid.attachCamera(cam);
        }

        private function cameraAccessAllowed(event:StatusEvent):void {
            switch (event.code) {
                case "Camera.Muted":
                    trace("User clicked Deny.");
                    break;
                case "Camera.Unmuted":
                    recordButton.enabled = true;
                    break;
            }
        }

        private function connect():void {
            nc = new NetConnection();
            nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            nc.connect(liveUrl);
        }

        private function init():void {
            liveUrl = FlexGlobals.topLevelApplication.parameters.liveUrl;
            embedWidth = FlexGlobals.topLevelApplication.parameters.embedWidth;
            embedHeight = FlexGlobals.topLevelApplication.parameters.embedHeight;
            embedUrlTemplate = FlexGlobals.topLevelApplication.parameters.embedUrlTemplate;
            videoMaxDuration = FlexGlobals.topLevelApplication.parameters.videoMaxDuration;
            servletUrl = FlexGlobals.topLevelApplication.parameters.servletUrl;
            question = FlexGlobals.topLevelApplication.parameters.question;
            mic = Microphone.getMicrophone();
            mic.setUseEchoSuppression(true);
            mic.setSilenceLevel(0);
            cam = Camera.getCamera();
            cam.setQuality(65536, 90);
            cam.setMode(640, 480, 15);
            video = new Video();
            video.opaqueBackground = false;
            videoContainer.video = video;
            videoContainer.addChild(countDownSplash);
            thumbnailsExtractorService = new ThumbnailsExtractorService(video);
            communicationService = new CommunicationService(servletUrl);
            videoTimer.time = videoMaxDuration;
        }

        private function startRecording():void {
            ns = new NetStream(nc);
            ns.attachAudio(mic);
            ns.attachCamera(cam);
            ns.publish(videoId, "record");
            this.video.attachCamera(cam);
            videoTimer.start(videoMaxDuration, stopRecording);
            thumbnailsExtractorService.start();
        }

        private function stopRecording():void {
            currentState = 'selectThumbnail';
            ns.attachCamera(null);
            ns.attachAudio(null);
            ns.close();
            video.attachCamera(null);
            videoTimer.stop();
            updateThumbnails(thumbnailsExtractorService.stop());
        }

        private function updateThumbnails(thumbnails:Array):void {
            var thumbnails:Array = thumbnailsExtractorService.stop();
            if (thumbnails.length > 0) {
                thumbnail0.source = new Bitmap(thumbnails[(int)((thumbnails.length * 1) / 8)]);
                thumbnail1.source = new Bitmap(thumbnails[(int)((thumbnails.length * 3) / 8)]);
                thumbnail2.source = new Bitmap(thumbnails[(int)((thumbnails.length * 5) / 8)]);
                thumbnail3.source = new Bitmap(thumbnails[(int)((thumbnails.length * 7) / 8)]);
            }
        }

        private function encodeToJPEG(data:BitmapData, quality:Number = 75):ByteArray {
            return new JPEGEncoder(quality).encode(data);
        }

        private function submitThumbnail(image:Image):void {
            communicationService.setThumbnail(videoId, encodeToJPEG((image.source as Bitmap).bitmapData));
            currentState = 'done';
        }

        private function switchToDone():void {
//            Alert.show("done");
            currentState = 'done';
        }

        private function switchToDone1(event:TimeEvent):void {
            Alert.show("done");
//            currentState = 'done';
        }

        private function playRecording():void {
            currentState = 'play';
            setTimeout(switchToDone, videoTimer.recordedDuration());
            videoDisplay.source = liveUrl + "/" + videoId;
        }

        private function streamStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetStream.Play.Start":
//                    currentState = 'play';
                    break;
                case "NetStream.Play.Stop":
                    currentState = 'done';
                    break;
            }
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            trace(event.info.code);
            if (event.info.code == "NetConnection.Connect.Success") {
                this.recordButton.enabled = true;
            }
            else {
                this.recordButton.enabled = false;
                Alert.show("Failed to connect!");
            }
        }

        private function onReady():void {
            init();
            ensureCameraPermissions();
            connect();
            communicationService.create(function (createdId:String):void {
                videoId = createdId;
//                Alert.show(videoId);
                currentState = 'start';
            });
        }

        private function startEffect():void {
            countDownSplash.start(startRecording, 3);
            currentState = 'record';
        }

        private function uploadVideo():void {
            currentState = 'upload'
            new VideoUploadHelper(servletUrl, videoId, uploadProgress.setProgress, switchToDone).upload();
        }

        private function finishComment():void {
            communicationService.complete(videoId);
            var wind:EmbedCodeWindow = new EmbedCodeWindow();
            wind.embedCode = EmbedCodeGenerator.generateCode(videoId, embedUrlTemplate, embedWidth, embedHeight);
            PopUpManager.addPopUp(wind, this, true);
            PopUpManager.centerPopUp(wind);
            currentState = 'done';
        }

        ]]></fx:Script>
    <s:states>
        <s:State name="start"/>
        <s:State name="record"/>
        <s:State name="selectThumbnail"/>
        <s:State name="play"/>
        <s:State name="done"/>
        <s:State name="upload"/>
    </s:states>
    <s:SkinnableContainer>
        <mx:VBox horizontalAlign="center">
            <s:SkinnableContainer id="playerSection" includeIn="start,record,done,upload" width="640" height="480" creationComplete="onReady()">
                <mx:VBox horizontalAlign="center" verticalAlign="middle" width="100%" height="100%">
                    <util:VideoContainer id="videoContainer" height="100%" width="100%"/>
                </mx:VBox>
                <mx:VBox horizontalAlign="center" backgroundAlpha="0" verticalAlign="middle" width="640" height="480">
                    <util:CountDownSplash id="countDownSplash"/>
                </mx:VBox>
                <mx:VBox id="box2" verticalAlign="top" backgroundAlpha="0.5" backgroundColor="#000000">
                    <mx:HBox>
                        <util:VideoTimer width="50" id="videoTimer"/>
                        <mx:VBox verticalAlign="middle" width="560" height="50" x="10">
                            <mx:Text selectable="false" id="questionText" text="{question}" fontSize="20" color="#FFFFFF"/>
                        </mx:VBox>
                    </mx:HBox>
                </mx:VBox>
            </s:SkinnableContainer>
        </mx:VBox>
        <mx:VBox width="640" height="480" verticalAlign="bottom">
            <mx:HBox height="40" width="100%" verticalAlign="middle" horizontalAlign="center" backgroundColor="#000000" backgroundAlpha="0.3">
                    <mx:Button id="recordButton" label.start="Record a Video" label.done="Re-record" includeIn="start, done" fontSize="18" fontWeight="bold" click="startEffect()" width="160"/>
                    <mx:Button label="Stop" includeIn="record" fontSize="18" fontWeight="bold"  click="stopRecording()" width="160"/>
                    <mx:Button label="Play" includeIn="done" fontSize="18" fontWeight="bold" click="playRecording()" width="160"/>
                    <mx:Button label="Upload a Video" includeIn="start" fontSize="18" fontWeight="bold" click="uploadVideo()" width="160"/>
                    <mx:Button label="Finish" includeIn="done" fontSize="18" fontWeight="bold" click="finishComment()" width="160"/>
            </mx:HBox>
            <mx:ProgressBar id="uploadProgress" width="100%" mode="manual" includeIn="upload"/>
        </mx:VBox>
        <mx:VBox includeIn="selectThumbnail" horizontalAlign="center" width="640" height="480" backgroundColor="#808080" verticalGap="22">
            <mx:HBox width="100%" horizontalAlign="center">
                <mx:Text text="Select your Thumbnail:" color="#FFFFFF" fontSize="20" textAlign="center"/>
            </mx:HBox>
            <mx:HBox width="100%" paddingLeft="53" horizontalGap="22">
                <mx:VBox click="submitThumbnail(thumbnail0)"><mx:Image id="thumbnail0"/></mx:VBox>
                <mx:VBox click="submitThumbnail(thumbnail1)"><mx:Image id="thumbnail1"/></mx:VBox>
            </mx:HBox>
            <mx:HBox width="100%" paddingLeft="53" horizontalGap="22">
                <mx:VBox click="submitThumbnail(thumbnail2)"><mx:Image id="thumbnail2"/></mx:VBox>
                <mx:VBox click="submitThumbnail(thumbnail3)"><mx:Image id="thumbnail3"/></mx:VBox>
            </mx:HBox>
        </mx:VBox>
        <mx:VBox id="videoPlayer" includeIn="play" horizontalAlign="center" width="640" height="480">
            <mx:HBox width="100%" height="100%">
                <s:VideoPlayer id="videoDisplay" autoPlay="true" width="100%" height="100%"/>
            </mx:HBox>
        </mx:VBox>
    </s:SkinnableContainer>
    <!--<mx:VBox width="640" height="480" verticalAlign="bottom">-->
        <!--<mx:Text id="log" text="log"/>-->
    <!--</mx:VBox>-->
</s:Application>

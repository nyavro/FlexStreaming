<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:util="com.wp.ui.*">
    <fx:Script><![CDATA[
        import com.wp.ui.CountDownSplash;

        import mx.controls.Alert;
        import mx.controls.Image;
        import mx.core.FlexGlobals;

        private var camera:Camera;
        private var mic:Microphone;
        private var cam:Camera;
        private var nc:NetConnection;
        private var ns:NetStream;
        private var video:Video;
        private var liveUrl:String;
        private var streamName:String;
        private var videoMaxDuration:int;

        private var cameraAccessGranted:Boolean = false;
        private var timer:Timer;
        private var thumbnails:Array = new Array();

        private function ensureCameraPermissions():void {
            cam.addEventListener(StatusEvent.STATUS, cameraAccessAllowed);
            var vid:Video = new Video();
            vid.attachCamera(cam);
        }

        private function cameraAccessAllowed(event:StatusEvent):void {
            switch (event.code) {
                case "Camera.Muted":
                    trace("User clicked Deny.");
                    break;
                case "Camera.Unmuted":
                    recordButton.enabled = true;
                    break;
            }
        }

        private function connect():void {
            nc = new NetConnection();
            nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            nc.connect(liveUrl);
        }

        private function init():void {
            liveUrl = FlexGlobals.topLevelApplication.parameters.liveUrl;
            streamName = FlexGlobals.topLevelApplication.parameters.streamName;
            videoMaxDuration = FlexGlobals.topLevelApplication.parameters.videoMaxDuration;
            mic = Microphone.getMicrophone();
            mic.setUseEchoSuppression(true);
            mic.setSilenceLevel(0);
            cam = Camera.getCamera();
            cam.setQuality(65536, 90);
            cam.setMode(640, 480, 15);
            video = new Video();
//            video.opaqueBackground = true;
            video.opaqueBackground = false;
            videoContainer.video = video;
            videoContainer.addChild(countDownSplash);
        }

        private function getThumbnail(event:TimerEvent):void {
            var bitmapData:BitmapData = new BitmapData(video.width*0.45, video.height*0.45);
            bitmapData.draw(video);
            var bitmap:Bitmap = new Bitmap(bitmapData);
            var image:Image = new Image();
            image.source = bitmap;
            thumbnails.push(image);
        }

        private function startRecording():void {
            stopButton.enabled = true;
            playButton.enabled = false;
            ns = new NetStream(nc);
            ns.attachAudio(mic);
            ns.attachCamera(cam);
            ns.publish(streamName, "record");
            this.video.attachCamera(cam);
            videoTimer.start(videoMaxDuration, stopRecording);
            timer = new Timer(1000);
            timer.start();
            timer.addEventListener(TimerEvent.TIMER, getThumbnail);
        }

        private function stopRecording():void {
            ns.close();
            videoTimer.stop();
            this.video.attachCamera(null);
            this.recordButton.enabled = true;
            this.stopButton.enabled = false;
            this.playButton.enabled = true;
            timer.stop();
            playerSection.visible = false;
            thumbnailsSection.visible = true;
            thumbnail0.removeAllChildren();
            thumbnail1.removeAllChildren();
            thumbnail2.removeAllChildren();
            thumbnail3.removeAllChildren();
            if (thumbnails.length > 0) {
                thumbnail0.addChild(thumbnails[(int)((thumbnails.length * 1) / 8)]);
                thumbnail1.addChild(thumbnails[(int)((thumbnails.length * 3) / 8)]);
                thumbnail2.addChild(thumbnails[(int)((thumbnails.length * 5) / 8)]);
                thumbnail3.addChild(thumbnails[(int)((thumbnails.length * 7) / 8)]);
            }
        }

        private function playRecording():void {
            playerSection.visible = true;
            thumbnailsSection.visible = false;
            ns.play(streamName);
            video.attachNetStream(ns);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            trace(event.info.code);
            if (event.info.code == "NetConnection.Connect.Success") {
                this.recordButton.enabled = true;
            }
            else {
                this.recordButton.enabled = false;
                Alert.show("Failed to connect!");
            }
        }


        private function onMicStatus(event:StatusEvent):void {
            if (event.code == "Microphone.Unmuted") {
                Alert.show("Microphone access was allowed.");
            }
            else if (event.code == "Microphone.Muted") {
                Alert.show("Microphone access was denied.");
            }
        }

        private function onReady():void {
            init();
            ensureCameraPermissions();
            connect();
        }

        private function startEffect():void {
            recordButton.enabled = false;
            playerSection.visible = true;
            thumbnailsSection.visible = false;
            countDownSplash.start(startRecording, 3);
        }

        private function uploadVideo():void {
            new VideoUploadHelper().upload();
        }
        ]]></fx:Script>
    <s:SkinnableContainer>
        <mx:VBox horizontalAlign="center">
            <s:SkinnableContainer id="playerSection"  width="640" height="480" creationComplete="onReady()">
                <mx:VBox horizontalAlign="center" verticalAlign="middle" width="100%" height="100%" x="0" y="0">
                    <util:VideoContainer id="videoContainer" height="100%" width="100%"/>
                </mx:VBox>
                <mx:VBox horizontalAlign="center" backgroundAlpha="0" verticalAlign="middle" width="640" height="480">
                    <util:CountDownSplash id="countDownSplash"/>
                </mx:VBox>
                <mx:VBox id="box2" horizontalAlign="left" verticalAlign="top" x="10" y="10">
                    <util:VideoTimer id="videoTimer"/>
                </mx:VBox>
            </s:SkinnableContainer>
            <mx:HBox verticalAlign="bottom" horizontalAlign="center">
                <mx:Button id="recordButton" label="Record" fontSize="18" fontWeight="bold" enabled="false" click="startEffect()"/>
                <mx:Button id="stopButton" label="Stop" fontSize="18" fontWeight="bold" enabled="false" click="stopRecording()"/>
                <mx:Button id="playButton" label="Play" fontSize="18" fontWeight="bold" enabled="false" click="playRecording()"/>
                <mx:Button id="uploadButton" label="Upload Video" fontSize="18" fontWeight="bold" enabled="true" click="uploadVideo()"/>
            </mx:HBox>
            <!--<mx:HScrollBar width="100%" height="100">-->

            <!--</mx:HScrollBar>-->
        </mx:VBox>
        <mx:VBox id="thumbnailsSection" horizontalAlign="center" width="640" height="470" visible="false">
            <mx:HBox width="100%" height="100%">
                <mx:VBox id="thumbnail0"/>
                <mx:VBox id="thumbnail1"/>
            </mx:HBox>
            <mx:HBox width="100%" height="100%">
                <mx:VBox id="thumbnail2"/>
                <mx:VBox id="thumbnail3"/>
            </mx:HBox>
        </mx:VBox>
    </s:SkinnableContainer>
</s:Application>

<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:util="com.wp.ui.*">
    <fx:Script><![CDATA[
        import mx.controls.Alert;
        import mx.controls.Text;
        import mx.core.FlexGlobals;
        import mx.core.UIComponent;
        import mx.events.EffectEvent;

        private var camera:Camera;
        private var mic:Microphone;
        private var cam:Camera;
        private var nc:NetConnection;
        private var ns:NetStream;
        private var timer:Timer;
        private var video:Video;
        private var liveUrl:String;
        private var streamName:String;
        private var videoMaxDuration:int;

        private var count:int = 3;

        private var cameraAccessGranted:Boolean = false;


        private var timeLeft:int;

        private function ensureCameraPermissions() {
            cam.addEventListener(StatusEvent.STATUS, cameraAccessAllowed);
            var vid:Video = new Video();
            vid.attachCamera(cam);
        }

        private function cameraAccessAllowed(event:StatusEvent):void {
            switch (event.code) {
                case "Camera.Muted":
                    trace("User clicked Deny.");
                    break;
                case "Camera.Unmuted":
                    Alert.show("Camera allowed");
                    recordButton.enabled = true;
                    break;
            }
        }

        private function connect():void {
            nc = new NetConnection();
            nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            nc.connect(liveUrl);
        }

        private function init():void {
            liveUrl = FlexGlobals.topLevelApplication.parameters.liveUrl;
            streamName = FlexGlobals.topLevelApplication.parameters.streamName;
            videoMaxDuration = FlexGlobals.topLevelApplication.parameters.videoMaxDuration;
            mic = Microphone.getMicrophone();
            mic.setUseEchoSuppression(true);
            mic.setSilenceLevel(0);
            cam = Camera.getCamera();
            cam.setQuality(65536,90);
            cam.setMode(640,480,15);
            video = new Video();
            video.opaqueBackground = true;
            videoContainer.video = video;
        }

        private function startRecording():void {
            ns = new NetStream(nc);
            ns.attachAudio(mic);
            ns.attachCamera(cam);
            ns.publish(streamName, "record");
            this.video.attachCamera(cam);
            this.recordButton.enabled = false;
            this.stopButton.enabled = true;
            timeLeft = videoMaxDuration;
            updateTimeleft();
            timerDisplay.visible = true;
            timer = new Timer(1000);
            timer.addEventListener(TimerEvent.TIMER, displayTimeLeft);
            timer.start();
        }

        private function displayTimeLeft(event:TimerEvent):void {
            timeLeft--;
            if(timeLeft==0) {
                stopRecording();
            } else {
                updateTimeleft();
            }
        }

        private function updateTimeleft():void {
            var minutes:int = timeLeft/60;
            timerDisplay.text = minutes + ":" + (timeLeft%60);
        }

        private function stopRecording():void {
            timerDisplay.visible = false;
            timer.stop();
            ns.close();
            this.video.attachCamera(null);
            this.recordButton.enabled = true;
            this.stopButton.enabled = false;
            this.playButton.enabled = true;
        }


        private function playRecording():void {
            this.ns.play(streamName);

            this.video.attachNetStream(ns);

        }

        private function netStatusHandler(event:NetStatusEvent):void {
            trace(event.info.code);
            if (event.info.code == "NetConnection.Connect.Success") {
                this.recordButton.enabled = true;
            }
            else {
                this.recordButton.enabled = false;
                mx.controls.Alert.show("Failed to connect!");
            }
        }


        private function onMicStatus(event:StatusEvent):void {
            if (event.code == "Microphone.Unmuted") {
                mx.controls.Alert.show("Microphone access was allowed.");
            }
            else if (event.code == "Microphone.Muted") {
                mx.controls.Alert.show("Microphone access was denied.");
            }
        }

        private function onReady():void {
            init();
            ensureCameraPermissions();
            connect();
        }

        private function startEffect():void {
            count = 3;
            runCountDown();
        }

        private function endEffectListener(eventObj:EffectEvent):void {
            setTimeout(runCountDown, 1);
        }

        private function runCountDown():void {
            if(count==0) {
                startRecording();
            } else {
                countDown.alpha = 1;
                countDown.scaleX = 2;
                countDown.scaleY = 2;
                countDown.text = count + "";
                count--;
                fadeOut.play([countDown]);
            }
        }
        ]]></fx:Script>
    <fx:Declarations>
        <s:Animate id="fadeOut" effectEnd="endEffectListener(event);" duration="1000">
            <s:SimpleMotionPath property="alpha" valueFrom="1" valueTo="0"/>
            <s:SimpleMotionPath property="scaleX" valueFrom="2" valueTo="1.7"/>
            <s:SimpleMotionPath property="scaleY" valueFrom="2" valueTo="1.7"/>
        </s:Animate>
    </fx:Declarations>
    <mx:VBox id="box1"  horizontalAlign="center" width="100%" height="100%">
        <s:SkinnableContainer id="box"  width="400" height="400" creationComplete="onReady()">
            <mx:VBox horizontalAlign="center" verticalAlign="middle" width="100%" height="100%" x="0" y="0">
                <util:VideoContainer id="videoContainer" height="100%" width="100%"/>
            </mx:VBox>
            <mx:VBox horizontalAlign="center" verticalAlign="middle" width="100%" height="100%">
                <mx:Text id="countDown" text="3" alpha="0" fontSize="120" color="#FF0000" selectable="false" scaleX="2" scaleY="2"/>
            </mx:VBox>
            <mx:VBox horizontalAlign="left" verticalAlign="top" x="10" y="10">
                <mx:Text id="timerDisplay" text="0:30" visible="false" color="#0FF000"/>
            </mx:VBox>
        </s:SkinnableContainer>
        <mx:HBox bottom="10" right="10">
            <mx:Button id="recordButton" label="Record" fontSize="18" fontWeight="bold" enabled="false" click="startEffect()"/>
            <mx:Button id="stopButton" label="Stop" fontSize="18" fontWeight="bold" enabled="false" click="stopRecording()"/>
            <mx:Button id="playButton" label="Play" fontSize="18" fontWeight="bold" enabled="false" click="playRecording()"/>
        </mx:HBox>
    </mx:VBox>
</s:Application>
